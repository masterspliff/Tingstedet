@using core.Models
@inject NavigationManager NavigationManager

<div class="card mb-3">
    <div class="card-body">
        @if (IsLoading)
        {
            @LoadingTemplate
        }
        else
        {
            <div class="d-flex align-items-center mb-2">
                @if (VoteButtonsTemplate != null)
                {
                    @VoteButtonsTemplate((Post.Votes, Post.UserVote, HandleUpvote, HandleDownvote))
                }
                else
                {
                    <VoteButtons 
                        Votes="@Post.Votes" 
                        UserVote="@Post.UserVote" 
                        OnUpvote="HandleUpvote" 
                        OnDownvote="HandleDownvote" />
                }
                
                <div class="flex-grow-1" style="cursor: pointer;" @onclick="NavigateToThread">
                    @if (HeaderTemplate != null)
                    {
                        @HeaderTemplate(Post)
                    }
                    else
                    {
                        <small class="text-muted">Posted by u/@Post.Author @Post.TimeAgo</small>
                        <h5 class="card-title mb-0">@Post.Title</h5>
                    }
                </div>
            </div>
            
            @if (ContentTemplate != null)
            {
                @ContentTemplate((Post, ShowFullContent, NavigateToThread))
            }
            else
            {
                <PostContent 
                    Content="@Post.Content"
                    ImageUrl="@Post.Url"
                    ShowFullContent="@ShowFullContent"
                    OnClick="NavigateToThread"
                    IsImageLoading="IsImageLoading" />
            }
            
            <div class="d-flex mt-2">
                @if (ActionsTemplate != null)
                {
                    @ActionsTemplate(Post)
                }
                else
                {
                    <button class="btn btn-sm btn-link text-decoration-none" @onclick="NavigateToThread">
                        <i class="bi bi-chat-left-text"></i> @Post.Comments Comments
                    </button>
                    <button class="btn btn-sm btn-link text-decoration-none">
                        <i class="bi bi-share"></i> Share
                    </button>
                    <button class="btn btn-sm btn-link text-decoration-none">
                        <i class="bi bi-bookmark"></i> Save
                    </button>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Post Post { get; set; } = new();
    
    [Parameter]
    public EventCallback<Post> OnUpvote { get; set; }
    
    [Parameter]
    public EventCallback<Post> OnDownvote { get; set; }
    
    [Parameter]
    public bool ShowFullContent { get; set; } = false;
    
    [Parameter]
    public bool IsLoading { get; set; } = false;
    
    [Parameter]
    public bool IsImageLoading { get; set; } = false;
    
    [Parameter]
    public RenderFragment? LoadingTemplate { get; set; }
    
    [Parameter]
    public RenderFragment<(int votes, int userVote, Func<Task> onUpvote, Func<Task> onDownvote)>? VoteButtonsTemplate { get; set; }
    
    [Parameter]
    public RenderFragment<Post>? HeaderTemplate { get; set; }
    
    [Parameter]
    public RenderFragment<(Post post, bool showFullContent, Action onClick)>? ContentTemplate { get; set; }
    
    [Parameter]
    public RenderFragment<Post>? ActionsTemplate { get; set; }
    
    private void NavigateToThread()
    {
        NavigationManager.NavigateTo($"/thread/{Post.Id}");
    }
    
    private async Task HandleUpvote()
    {
        await OnUpvote.InvokeAsync(Post);
    }
    
    private async Task HandleDownvote()
    {
        await OnDownvote.InvokeAsync(Post);
    }
    
    protected override void OnInitialized()
    {
        if (LoadingTemplate == null)
        {
            LoadingTemplate = DefaultLoadingTemplate;
        }
    }
    
    private RenderFragment DefaultLoadingTemplate => builder =>
    {
        builder.OpenElement(0, "div");
        
        builder.OpenComponent<Placeholder>(1);
        builder.AddAttribute(2, "Width", PlaceholderWidth.Col8);
        builder.AddAttribute(3, "Size", PlaceholderSize.Large);
        builder.CloseComponent();
        
        for (int i = 0; i < 2; i++)
        {
            builder.OpenComponent<Placeholder>(4 + i * 3);
            builder.AddAttribute(5 + i * 3, "Width", PlaceholderWidth.Col12);
            builder.AddAttribute(6 + i * 3, "Class", i > 0 ? "mt-1" : "");
            builder.CloseComponent();
        }
        
        builder.OpenElement(10, "div");
        builder.AddAttribute(11, "class", "d-flex mt-3");
        
        for (int i = 0; i < 3; i++)
        {
            builder.OpenComponent<Placeholder>(12 + i * 3);
            builder.AddAttribute(13 + i * 3, "Width", PlaceholderWidth.Col2);
            builder.AddAttribute(14 + i * 3, "Size", PlaceholderSize.Small);
            builder.AddAttribute(15 + i * 3, "Class", i > 0 ? "ms-2" : "");
            builder.CloseComponent();
        }
        
        builder.CloseElement(); // close div.d-flex
        builder.CloseElement(); // close outer div
    };
}
