@page "/"
@using core.Models
@using webapp.Services
@using webapp.Components.Post
@using webapp.Components.Sidebar
@inject IPostService PostService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="container mt-4">
    @if (_showApiKeyDialog)
    {
        <div class="modal d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Enter Claude API Key</h5>
                        <button type="button" class="btn-close" @onclick="CancelApiKeyDialog"></button>
                    </div>
                    <div class="modal-body">
                        <p>No valid API key was found. Please enter your Claude API key to generate content:</p>
                        <div class="mb-3">
                            <input type="password" class="form-control" @bind="_apiKey" placeholder="Enter your Claude API key" />
                            <small class="text-muted">Your API key is only used for this request and not stored persistently.</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CancelApiKeyDialog">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SubmitApiKey">Submit</button>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row">
        <!-- Main content area -->
        <div class="col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4>Recent Posts</h4>
                <div class="d-flex">
                    <button class="btn btn-success me-2" @onclick="GenerateContent">Generate Content</button>
                    <button class="btn btn-danger me-2" @onclick="DeleteAllContent">Delete All</button>
                    <button class="btn btn-primary" @onclick="NavigateToCreatePost">Create Post</button>
                </div>
            </div>
            
            <!-- PostList component for search and sorting -->
            <PostList 
                IsLoading="!_contentLoaded"
                OnSearch="HandleSearch"
                OnSortChanged="HandleSortChange" />
                
            <!-- Reddit-like post display -->
            @if (!_contentLoaded)
            {
                <div class="row">
                    @for (int i = 0; i < 3; i++)
                    {
                        <div class="col-12 mb-3">
                            <PostCardPlaceholder />
                        </div>
                    }
                </div>
            }
            else if (!_filteredPosts.Any())
            {
                <div class="text-center py-5">
                    <p class="text-muted">No posts found. Be the first to create a post!</p>
                    <button class="btn btn-primary mt-3" @onclick="NavigateToCreatePost">Create a Post</button>
                </div>
            }
            else
            {
                <div class="posts-container">
                    @foreach (var post in _filteredPosts)
                    {
                        <div class="mb-3">
                            <PostCard 
                                Post="post" 
                                OnUpvote="HandleUpvote" 
                                OnDownvote="HandleDownvote"
                                IsImageLoading="IsImageLoading(post.Id)" />
                        </div>
                    }
                </div>
            }
        </div>
        
        <!-- Sidebar -->
        <div class="col-md-4">
            @if (!_contentLoaded)
            {
                <SidebarPlaceholder />
            }
            else
            {
                <CommunitySidebar />
            }
        </div>
    </div>
</div>

@code {
    private bool _contentLoaded = false;
    private List<Post> _posts = new();
    private List<Post> _filteredPosts = new();
    private Dictionary<int, bool> _imageLoadingStates = new();
    private string _currentUser = "User";
    private string _searchTerm = "";
    private string _currentSort = "Hot";

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }
    
    private async Task LoadPosts()
    {
        try 
        {
            _posts = await PostService.GetPostsAsync();
            ApplySortAndFilter();
            _contentLoaded = true;
            
            // Initialize image loading states
            foreach (var post in _posts.Where(p => !string.IsNullOrEmpty(p.Url)))
            {
                _imageLoadingStates[post.Id] = true;
                _ = LoadPostImage(post);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading posts: {ex.Message}");
            _contentLoaded = true;
        }
    }
    
    private void ApplySortAndFilter()
    {
        // First apply search filter if any
        var filtered = string.IsNullOrWhiteSpace(_searchTerm) 
            ? _posts 
            : _posts.Where(p => 
                p.Title.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) || 
                p.Content.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                p.Author.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        
        // Then apply sorting
        _filteredPosts = _currentSort switch
        {
            "New" => filtered.OrderByDescending(p => p.CreatedAt).ToList(),
            "Top" => filtered.OrderByDescending(p => p.Votes).ToList(),
            "Controversial" => filtered.OrderBy(p => Math.Abs(p.Votes)).ToList(),
            _ => filtered.OrderByDescending(p => p.Votes).ThenByDescending(p => p.CreatedAt).ToList() // "Hot" is default
        };
    }
    
    private async Task LoadPostImage(Post post)
    {
        if (!string.IsNullOrEmpty(post.Url))
        {
            await PostService.LoadImageAsync(post.Url);
        }
        _imageLoadingStates[post.Id] = false;
        StateHasChanged();
    }

    private async Task HandleUpvote(Post post)
    {
        var updatedPost = await PostService.UpvotePostAsync(post.Id, _currentUser);
        post.Votes = updatedPost.Votes;
        post.UserVote = updatedPost.UserVote;
    }

    private async Task HandleDownvote(Post post)
    {
        var updatedPost = await PostService.DownvotePostAsync(post.Id, _currentUser);
        post.Votes = updatedPost.Votes;
        post.UserVote = updatedPost.UserVote;
    }
    
    private void HandleSearch(string searchTerm)
    {
        _searchTerm = searchTerm;
        ApplySortAndFilter();
    }
    
    private void HandleSortChange(string sortOption)
    {
        _currentSort = sortOption;
        ApplySortAndFilter();
    }
    
    private bool IsImageLoading(int postId)
    {
        return _imageLoadingStates.ContainsKey(postId) && _imageLoadingStates[postId];
    }
    
    private void NavigateToCreatePost()
    {
        NavigationManager.NavigateTo("/create");
    }
    
    private string _apiKey = "";
    private bool _showApiKeyDialog = false;
    
    private async Task GenerateContent()
    {
        // Show loading indicator
        _contentLoaded = false;
        StateHasChanged();
        
        try
        {
            var result = await PostService.GenerateContentAsync(_apiKey);
            
            if (result.Success)
            {
                await LoadPosts();
                await JsRuntime.InvokeVoidAsync("alert", "New content generated successfully! (Existing content was preserved)");
            }
            else if (result.NeedsApiKey)
            {
                // Show API key dialog
                _showApiKeyDialog = true;
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Failed to generate content: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error generating content: {ex.Message}");
            await JsRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            _contentLoaded = true;
            StateHasChanged();
        }
    }
    
    private async Task SubmitApiKey()
    {
        if (string.IsNullOrWhiteSpace(_apiKey))
        {
            await JsRuntime.InvokeVoidAsync("alert", "Please enter a valid API key");
            return;
        }
        
        _showApiKeyDialog = false;
        _contentLoaded = false;
        StateHasChanged();
        
        try
        {
            var result = await PostService.GenerateContentAsync(_apiKey);
            
            if (result.Success)
            {
                await LoadPosts();
                await JsRuntime.InvokeVoidAsync("alert", "New content generated successfully! (Existing content was preserved)");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Failed to generate content: {result.ErrorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error generating content with API key: {ex.Message}");
            await JsRuntime.InvokeVoidAsync("alert", $"Error: {ex.Message}");
        }
        finally
        {
            _contentLoaded = true;
            StateHasChanged();
        }
    }
    
    private void CancelApiKeyDialog()
    {
        _showApiKeyDialog = false;
        _apiKey = "";
    }
    
    private async Task DeleteAllContent()
    {
        if (await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete ALL content? This cannot be undone."))
        {
            // Show loading indicator
            _contentLoaded = false;
            StateHasChanged();
            
            var success = await PostService.DeleteAllContentAsync();
            
            if (success)
            {
                await LoadPosts();
                await JsRuntime.InvokeVoidAsync("alert", "All content deleted successfully!");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Failed to delete content. Check the console for errors.");
                _contentLoaded = true;
                StateHasChanged();
            }
        }
    }
}

