@page "/"
@using core.Models
@using webapp.Services
@using webapp.Components.Post
@using webapp.Components.Sidebar
@inject IPostService PostService

<div class="container mt-4">
    <div class="row">
        <!-- Main content area -->
        <div class="col-md-8">
            @if (!_contentLoaded)
            {
                <!-- Placeholder for posts while loading -->
                <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
                    @for (int i = 0; i < 5; i++)
                    {
                        <PostCardPlaceholder />
                    }
                </PlaceholderContainer>
            }
            else
            {
                <!-- Actual content after loading -->
                @foreach (var post in _posts)
                {
                    <PostCard 
                        Post="post" 
                        OnUpvote="HandleUpvote" 
                        OnDownvote="HandleDownvote"
                        IsImageLoading="IsImageLoading(post.Id)" />
                }
            }
        </div>
        
        <!-- Sidebar -->
        <div class="col-md-4">
            @if (!_contentLoaded)
            {
                <SidebarPlaceholder />
            }
            else
            {
                <CommunitySidebar />
            }
        </div>
    </div>
</div>

@code {
    private bool _contentLoaded = false;
    private List<Post> _posts = new();
    private Dictionary<int, bool> _imageLoadingStates = new();

    protected override async Task OnInitializedAsync()
    {
        _posts = await PostService.GetPostsAsync();
        _contentLoaded = true;
        
        // Initialize image loading states
        foreach (var post in _posts.Where(p => !string.IsNullOrEmpty(p.ImageUrl)))
        {
            _imageLoadingStates[post.Id] = true;
            _ = LoadPostImage(post);
        }
    }
    
    private async Task LoadPostImage(Post post)
    {
        await PostService.LoadImageAsync(post.ImageUrl);
        _imageLoadingStates[post.Id] = false;
        StateHasChanged();
    }

    private void HandleUpvote(Post post)
    {
        PostService.UpvotePost(post);
    }

    private void HandleDownvote(Post post)
    {
        PostService.DownvotePost(post);
    }
    
    private bool IsImageLoading(int postId)
    {
        return _imageLoadingStates.ContainsKey(postId) && _imageLoadingStates[postId];
    }
}

