@page "/"
@using core.Models
@using webapp.Services
@using webapp.Components.Post
@using webapp.Components.Sidebar
@inject IPostService PostService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row">
        <!-- Main content area -->
        <div class="col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h4>Recent Posts</h4>
                <button class="btn btn-primary" @onclick="NavigateToCreatePost">Create Post</button>
            </div>
            
            @if (!_contentLoaded)
            {
                <!-- Placeholder for posts while loading -->
                <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
                    @for (int i = 0; i < 5; i++)
                    {
                        <PostCardPlaceholder />
                    }
                </PlaceholderContainer>
            }
            else
            {
                <!-- Actual content after loading -->
                @foreach (var post in _posts)
                {
                    <PostCard 
                        Post="post" 
                        OnUpvote="(p) => HandleUpvote(p)" 
                        OnDownvote="(p) => HandleDownvote(p)"
                        IsImageLoading="IsImageLoading(post.Id)" />
                }
                
                @if (!_posts.Any())
                {
                    <div class="text-center py-5">
                        <p class="text-muted">No posts found. Be the first to create a post!</p>
                        <button class="btn btn-primary mt-3" @onclick="NavigateToCreatePost">Create a Post</button>
                    </div>
                }
            }
        </div>
        
        <!-- Sidebar -->
        <div class="col-md-4">
            @if (!_contentLoaded)
            {
                <SidebarPlaceholder />
            }
            else
            {
                <CommunitySidebar />
            }
        </div>
    </div>
</div>

@code {
    private bool _contentLoaded = false;
    private List<Post> _posts = new();
    private Dictionary<int, bool> _imageLoadingStates = new();
    private string _currentUser = "User";

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }
    
    private async Task LoadPosts()
    {
        try 
        {
            _posts = await PostService.GetPostsAsync();
            _contentLoaded = true;
            
            // Initialize image loading states
            foreach (var post in _posts.Where(p => !string.IsNullOrEmpty(p.Url)))
            {
                _imageLoadingStates[post.Id] = true;
                _ = LoadPostImage(post);
            }
        }
        catch (Exception)
        {
            _contentLoaded = true;
        }
    }
    
    private async Task LoadPostImage(Post post)
    {
        await PostService.LoadImageAsync(post.Url);
        _imageLoadingStates[post.Id] = false;
        StateHasChanged();
    }

    private async Task HandleUpvote(Post post)
    {
        await PostService.UpvotePostAsync(post, _currentUser);
    }

    private async Task HandleDownvote(Post post)
    {
        await PostService.DownvotePostAsync(post, _currentUser);
    }
    
    private bool IsImageLoading(int postId)
    {
        return _imageLoadingStates.ContainsKey(postId) && _imageLoadingStates[postId];
    }
    
    private void NavigateToCreatePost()
    {
        NavigationManager.NavigateTo("/create");
    }
}

