@page "/thread/{PostId:int}"
@using core.Models
@using webapp.Services
@using webapp.Components.Post
@using webapp.Components.Sidebar
@inject IPostService PostService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row">
        <!-- Main content area -->
        <div class="col-md-8">
            <!-- Back button - always visible -->
            <div class="mb-3">
                <button class="btn btn-link p-0" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Back to posts
                </button>
            </div>
            
            @if (_loading)
            {
                <ThreadPlaceholder />
            }
            else
            {
                <!-- Post content -->
                <PostCard 
                    Post="_post" 
                    OnUpvote="HandleUpvote" 
                    OnDownvote="HandleDownvote" 
                    ShowFullContent="true" 
                    IsImageLoading="_imageLoading">
                    <HeaderTemplate>
                        <div>
                            <small class="text-muted">Posted by u/@context.Author @context.TimeAgo</small>
                            <h4 class="card-title mt-1">@context.Title</h4>
                        </div>
                    </HeaderTemplate>
                </PostCard>
                
                <!-- Comment form -->
                <CommentForm OnSubmit="HandleCommentSubmit" />
                
            <!-- Comments section -->
            <CommentsSection
                Comments="_post.CommentsList"
                CommentsCount="_post.Comments"
                PostAuthor="_post.Author"
                OnUpvote="HandleCommentUpvote"
                OnDownvote="HandleCommentDownvote"
                OnAddReply="HandleAddReply" />
            }
        </div>
        
        <!-- Sidebar -->
        <div class="col-md-4">
            <CommunitySidebar OnCreatePost="NavigateToCreatePost" />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int PostId { get; set; }
    
    private Post _post = new();
    private bool _loading = true;
    private bool _imageLoading = false;
    private string _commentAuthor = "";
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPost();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (_post.Id != PostId)
        {
            await LoadPost();
        }
    }
    
    private async Task LoadPost()
    {
        _loading = true;
        _post = await PostService.GetPostByIdAsync(PostId);
        _loading = false;
        
        // Start loading image if post has one
        if (!string.IsNullOrEmpty(_post.Url))
        {
            _imageLoading = true;
            await LoadPostImage();
        }
    }
    
    private async Task LoadPostImage()
    {
        if (!string.IsNullOrEmpty(_post.Url))
        {
            await PostService.LoadImageAsync(_post.Url);
        }
        _imageLoading = false;
        StateHasChanged();
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }
    
    private void NavigateToCreatePost()
    {
        NavigationManager.NavigateTo("/create");
    }
    
    private async Task HandleUpvote(Post post)
    {
        var updatedPost = await PostService.UpvotePostAsync(post.Id, _commentAuthor.Length > 0 ? _commentAuthor : "User");
        post.Votes = updatedPost.Votes;
        post.UserVote = updatedPost.UserVote;
    }
    
    private async Task HandleDownvote(Post post)
    {
        var updatedPost = await PostService.DownvotePostAsync(post.Id, _commentAuthor.Length > 0 ? _commentAuthor : "User");
        post.Votes = updatedPost.Votes;
        post.UserVote = updatedPost.UserVote;
    }
    
    private async Task HandleCommentUpvote(Comment comment)
    {
        var updatedComment = await PostService.UpvoteCommentAsync(_post.Id, comment.Id, _commentAuthor.Length > 0 ? _commentAuthor : "User");
        comment.Votes = updatedComment.Votes;
        comment.UserVote = updatedComment.UserVote;
    }
    
    private async Task HandleCommentDownvote(Comment comment)
    {
        var updatedComment = await PostService.DownvoteCommentAsync(_post.Id, comment.Id, _commentAuthor.Length > 0 ? _commentAuthor : "User");
        comment.Votes = updatedComment.Votes;
        comment.UserVote = updatedComment.UserVote;
    }
    
    private async Task AddComment(string commentText)
    {
        try
        {
            var newComment = await PostService.AddCommentAsync(_post.Id, commentText, _commentAuthor.Length > 0 ? _commentAuthor : "User");
            
            // Add the new comment to the post's comments list
            if (newComment != null && newComment.Id > 0)
            {
                _post.CommentsList.Add(newComment);
                _post.Comments = _post.CommentsList.Count;
            }
            else
            {
                // Refresh the post to get updated comments
                _post = await PostService.GetPostByIdAsync(_post.Id);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error adding comment: {ex.Message}");
            
            // Fallback to client-side
            PostService.AddComment(_post, commentText);
        }
    }
    
    private async Task HandleAddReply((Comment ParentComment, string ReplyText) data)
    {
        if (!string.IsNullOrWhiteSpace(data.ReplyText))
        {
            // Use the current user's name if available, otherwise use a default
            string author = string.IsNullOrWhiteSpace(_commentAuthor) ? "User" : _commentAuthor;
            
            try
            {
                // Call server API to add the reply
                var newReply = await PostService.AddReplyAsync(_post.Id, data.ParentComment.Id, data.ReplyText, author);
                
                // If successful, update the UI with the new reply
                if (newReply != null)
                {
                    // Find the parent comment in the post's comments list
                    var parentComment = FindCommentById(_post.CommentsList, data.ParentComment.Id);
                    
                    if (parentComment != null)
                    {
                        // Initialize Replies collection if it's null
                        if (parentComment.Replies == null)
                        {
                            parentComment.Replies = new List<Comment>();
                        }
                        
                        // Add the new reply to the parent comment's Replies collection
                        parentComment.Replies.Add(newReply);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error adding reply: {ex.Message}");
                
                // Fallback to client-side
                PostService.AddReply(data.ParentComment, data.ReplyText);
            }
            
            // Force UI refresh
            StateHasChanged();
        }
    }
    
    // Helper method to find a comment by ID in a nested comment structure
    private Comment? FindCommentById(List<Comment> comments, int commentId)
    {
        foreach (var comment in comments)
        {
            if (comment.Id == commentId)
            {
                return comment;
            }
            
            // Check replies recursively
            if (comment.Replies != null && comment.Replies.Any())
            {
                var foundInReplies = FindCommentById(comment.Replies, commentId);
                if (foundInReplies != null)
                {
                    return foundInReplies;
                }
            }
        }
        
        return null;
    }
    
    // Nested components for better organization
    private async Task HandleCommentSubmit((string Author, string CommentText) data)                                                                                                                          
    {                                                                                                                                                                                                         
        _commentAuthor = data.Author;                                                                                                                                                                         
        await AddComment(data.CommentText);                                                                                                                                                                   
    }   
    
    
}
