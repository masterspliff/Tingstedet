@page "/thread/{PostId:int}"
@using core.Models
@using webapp.Services
@using webapp.Components.Post
@inject IPostService PostService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row">
        <!-- Main content area -->
        <div class="col-md-8">
            <!-- Back button - always visible -->
            <div class="mb-3">
                <button class="btn btn-link p-0" @onclick="NavigateBack">
                    <i class="bi bi-arrow-left"></i> Back to posts
                </button>
            </div>
            
            @if (_loading)
            {
                <PlaceholderContainer Animation="PlaceholderAnimation.Glow">
                    <PostCardPlaceholder ContentLines="4" />
                    
                    <div class="card mb-3">
                        <div class="card-body">
                            <Placeholder Width="PlaceholderWidth.Col6" Size="PlaceholderSize.Small" />
                            <Placeholder Width="PlaceholderWidth.Col12" Class="mt-2" />
                            <div class="d-flex justify-content-end mt-2">
                                <Placeholder Width="PlaceholderWidth.Col2" Size="PlaceholderSize.Small" />
                            </div>
                        </div>
                    </div>
                    
                    @for (int i = 0; i < 2; i++)
                    {
                        <div class="comment mb-3">
                            <div class="d-flex">
                                <div class="me-2" style="width: 30px;">
                                    <Placeholder Width="PlaceholderWidth.Col12" Size="PlaceholderSize.Small" />
                                </div>
                                <div class="flex-grow-1">
                                    <Placeholder Width="PlaceholderWidth.Col3" Size="PlaceholderSize.Small" />
                                    <Placeholder Width="PlaceholderWidth.Col12" Class="mt-1" />
                                    <Placeholder Width="PlaceholderWidth.Col10" Class="mt-1" />
                                </div>
                            </div>
                        </div>
                    }
                </PlaceholderContainer>
            }
            else
            {
                <!-- Post content -->
                <PostCard 
                    Post="_post" 
                    OnUpvote="(p) => HandleUpvote(p)" 
                    OnDownvote="(p) => HandleDownvote(p)" 
                    ShowFullContent="true" 
                    IsImageLoading="_imageLoading">
                    <HeaderTemplate>
                            <div>
                                <small class="text-muted">Posted by u/@context.Author @context.TimeAgo</small>
                                <h4 class="card-title mt-1">@context.Title</h4>
                            </div>
                    </HeaderTemplate>
                </PostCard>
                
                <!-- Comment form -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="author" class="form-label">Your Name</label>
                            <input type="text" class="form-control" id="author" @bind="_commentAuthor">
                            @if (_authorError)
                            {
                                <div class="text-danger mt-1">Name is required</div>
                            }
                        </div>
                        
                        <textarea class="form-control mb-3" rows="4" 
                                  placeholder="What are your thoughts?" @bind="_newCommentText"></textarea>
                        @if (_commentTextError)
                        {
                            <div class="text-danger mb-2">Comment text is required</div>
                        }
                        
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary" @onclick="AddComment">
                                @if (_isSubmittingComment)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    <span class="ms-1">Submitting...</span>
                                }
                                else
                                {
                                    <span>Comment</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- Comments section -->
                <div class="comments-section">
                    <div class="d-flex align-items-center mb-3">
                        <h5 class="mb-0 me-2">Comments (@_post.Comments)</h5>
                        <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                Sort By: @_selectedSort
                            </button>
                            <ul class="dropdown-menu">
                                @foreach (var sortOption in _sortOptions)
                                {
                                    <li><button class="dropdown-item" @onclick="() => SetSortOption(sortOption)">@sortOption</button></li>
                                }
                            </ul>
                        </div>
                    </div>
                    
                    @if (_post.CommentsList.Any())
                    {
                        @foreach (var comment in GetSortedComments())
                        {
                            <CommentCard 
                                Comment="comment" 
                                OnUpvote="(c) => HandleCommentUpvote(c)" 
                                OnDownvote="(c) => HandleCommentDownvote(c)"
                                OnAddReply="HandleAddReply">
                                <HeaderTemplate>
                                        <div class="d-flex align-items-center mb-1">
                                            <small class="fw-bold me-2">@context.Author</small>
                                            <small class="text-muted">@context.TimeAgo</small>
                                            @if (context.Author == _post.Author)
                                            {
                                                <span class="badge bg-primary ms-2">Author</span>
                                            }
                                        </div>
                                </HeaderTemplate>
                            </CommentCard>
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <p class="text-muted">No comments yet. Be the first to comment!</p>
                        </div>
                    }
                </div>
            }
        </div>
        
        <!-- Sidebar -->
        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-header">
                    <strong>About Community</strong>
                </div>
                <div class="card-body">
                    <p>Welcome to Tingstedet, a place to discuss all things related to our community.</p>
                    <div class="d-flex justify-content-between mb-2">
                        <div>
                            <div><strong>12.5k</strong></div>
                            <div>Members</div>
                        </div>
                        <div>
                            <div><strong>238</strong></div>
                            <div>Online</div>
                        </div>
                    </div>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="NavigateToCreatePost">Create Post</button>
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <strong>Posting Rules</strong>
                </div>
                <div class="card-body p-0">
                    <ul class="list-group list-group-flush">
                        <li class="list-group-item">1. Be respectful in discussions</li>
                        <li class="list-group-item">2. No hate speech or harassment</li>
                        <li class="list-group-item">3. Provide sources for claims</li>
                        <li class="list-group-item">4. Stay on topic</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int PostId { get; set; }
    
    private Post _post = new();
    private bool _loading = true;
    private string _newCommentText = "";
    private string _commentAuthor = "";
    private bool _imageLoading = false;
    private string _selectedSort = "Best";
    private List<string> _sortOptions = new() { "Best", "Top", "New", "Controversial", "Old" };
    private bool _isSubmittingComment = false;
    private bool _commentTextError = false;
    private bool _authorError = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadPost();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (_post.Id != PostId)
        {
            await LoadPost();
        }
    }
    
    private async Task LoadPost()
    {
        _loading = true;
        _post = await PostService.GetPostByIdAsync(PostId);
        _loading = false;
        
        // Start loading image if post has one
        if (!string.IsNullOrEmpty(_post.Url))
        {
            _imageLoading = true;
            await LoadPostImage();
        }
    }
    
    private async Task LoadPostImage()
    {
        await PostService.LoadImageAsync(_post.Url);
        _imageLoading = false;
        StateHasChanged();
    }
    
    private List<Comment> GetSortedComments()
    {
        return _selectedSort switch
        {
            "Top" => _post.CommentsList.OrderByDescending(c => c.Votes).ToList(),
            "New" => _post.CommentsList.OrderByDescending(c => c.TimeAgo.Contains("just now")).ThenByDescending(c => c.Id).ToList(),
            "Controversial" => _post.CommentsList.OrderBy(c => Math.Abs(c.Votes)).ToList(),
            "Old" => _post.CommentsList.OrderBy(c => c.Id).ToList(),
            _ => _post.CommentsList.OrderByDescending(c => c.Votes).ToList() // "Best" is default
        };
    }
    
    private void SetSortOption(string option)
    {
        _selectedSort = option;
    }
    
    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/");
    }
    
    private void NavigateToCreatePost()
    {
        NavigationManager.NavigateTo("/create");
    }
    
    private async Task HandleUpvote(Post post)
    {
        await PostService.UpvotePostAsync(post, _commentAuthor.Length > 0 ? _commentAuthor : "User");
    }
    
    private async Task HandleDownvote(Post post)
    {
        await PostService.DownvotePostAsync(post, _commentAuthor.Length > 0 ? _commentAuthor : "User");
    }
    
    private async Task HandleCommentUpvote(Comment comment)
    {
        await PostService.UpvoteCommentAsync(comment, _commentAuthor.Length > 0 ? _commentAuthor : "User");
    }
    
    private async Task HandleCommentDownvote(Comment comment)
    {
        await PostService.DownvoteCommentAsync(comment, _commentAuthor.Length > 0 ? _commentAuthor : "User");
    }
    
    private async Task AddComment()
    {
        // Validate
        _authorError = string.IsNullOrWhiteSpace(_commentAuthor);
        _commentTextError = string.IsNullOrWhiteSpace(_newCommentText);
        
        if (_authorError || _commentTextError)
        {
            return;
        }
        
        _isSubmittingComment = true;
        
        try
        {
            await PostService.AddCommentAsync(_post, _newCommentText, _commentAuthor);
            _newCommentText = ""; // Clear comment text after successful submission
        }
        catch (Exception)
        {
            // Fallback to client-side
            PostService.AddComment(_post, _newCommentText);
            _newCommentText = "";
        }
        finally
        {
            _isSubmittingComment = false;
        }
    }
    
    private void HandleAddReply((Comment ParentComment, string ReplyText) data)
    {
        if (!string.IsNullOrWhiteSpace(data.ReplyText))
        {
            PostService.AddReply(data.ParentComment, data.ReplyText);
        }
    }
}
